{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Use a standard terminal emulator as a 3270 terminal interface. Write scripts to automate 3270 terminal interaction. This is both a 3270 terminal emulator and a Python libary. The zti module provides a 3270 user interface through a Windows Command Prompt or a unix/ascii terminal. The tnz module handles the interface to the 3270 data stream. The ati module allows for easier 3270 terminal automation.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Runs on many platforms (including z/OS)</li> <li>Secure telnet (TLS) by default</li> <li>Manages multiple 3270 sessions at the same time</li> <li>Lightweight - does not duplicate standard terminal function</li> <li>Code page 310 for APL graphic symbols (i.e. 3278T terminal type)</li> </ul>"},{"location":"#installing","title":"Installing","text":"<p>Python 3.6 or later is required. Although not required, on platforms other than z/OS, it is suggested you also install the ebcdic package from PyPI. Use pip to install the latest tnz: <pre><code>pip3 install ebcdic tnz\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#automation","title":"Automation","text":"<p>See examples to get started writing a script to automate 3270 interaction.</p>"},{"location":"#emulator","title":"Emulator","text":"<p>Run the installed zti (Z Terminal Interface) script to start the emulator: <pre><code>zti\n</code></pre></p> <p>If your path is not set up for running the installed zti console script, you can run zti with <code>python -m tnz.zti</code> instead.</p> <p>Starting <code>zti</code> takes you into the zti command line interface shell. Key tab for command completion, up/down for command history. </p> <p>The <code>goto</code> command takes you to a full screen 3270 interface. When space is available in the terminal screen/window, a status line is provided as well as a session selector.</p> <p>The basic syntax of <code>goto</code> is: </p> <pre><code>goto fully-qualified-host-name[:port]\n</code></pre> <p></p> <p>In Windows, the Lucida Console font works well with graphic character APL symbols exploited by ISPF. </p> <p>Large and arbitrarily-sized screens are supported. </p> <p>Standard unix/ascii terminals are supported. In the screenshot below, PuTTY is used as the terminal emulator. The connection was made from PuTTY to z/OS via ssh and zti is running on z/OS. </p> <p>The code in this repository aims to be portable. To achieve this, the number of dependencies is kept to a minimum. The only hard requirement across platforms is Python and the Python Standard Library. Though it is likely you will also want additional ebcdic code pages in order to use your code page of choice (i.e. the ebcdic package).</p>"},{"location":"#emulator-features","title":"Emulator Features","text":"<ul> <li>Use Alt+letter to access ISPF menus</li> <li>Mouse click sets cursor position</li> <li>Mouse double-click sets cursor position and send Enter</li> <li>Use any EBCDIC code page available to Python</li> <li>Use of code page 310 for APL graphic symbols</li> <li>Paste multiline block of text</li> </ul>"},{"location":"#running-zti-on-windows","title":"Running zti on Windows","text":"<p>The trapping of the keyboard disables keyboard shortcuts documented in the Control-menu-&gt;Edit menu. But the functions can still be accessed through the Control-menu. For example: mouse click top-left corner, E (Edit), F (Find) to find text.</p> <p>To copy text in Command Prompt, make sure that the Quick Edit Mode option is selected in the Properties accessed through the Control-menu. Then you can hold Shift while using the mouse to select text. Once the text is selected, press Enter to copy the text. There are other ways to select text, but I this to be the easiest.</p> <p>Before establishing a session, get the window sized the way you want it. Window resizing is not handled well in Windows. If you do resize, just use Esc to get to the command prompt then <code>goto</code> to get back to the session.</p> <p>Control-menu-&gt;Properties will take you to properties for the terminal. The character size and font can be set. I recommend Lucida Console - it is readable and the graphic symbols are fairly good at connecting like they are supposed to.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See CONTRIBUTING.md.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>Hats off to the team responsible for the IBM internal Automated Task Interpreter (ATI) tool: Richard Lynch, Karen Eickemeyer, and Ronald Barber.</p>"},{"location":"ati-compat/","title":"ati (compatability)","text":"<p>ATI tnz interface</p> <p>ATI (Automated Task Interpreter) was an IBM-internal language/runtime built for automating 3270 terminal interaction. It had a syntax very similar to Rexx. This module is intended to help with porting ATI code to python. It is also the base of the zti tool.</p> <p>Some of these functions have enhancements on top of the ATI function. Enhancments include using a negative index/position or length to indicate a position relative to the END of the string. See individual functions for details.</p> <p>USAGE     The way to make a python script that is most like ATI source code     is to use 'import *'. Be warned that this will override the 'set'     symbol (otherwise a python builtin function).</p> <pre><code>    from tnz.ati import *\n    set('SESSION', 'SES1')\n    wait(lambda: scrhas('RUNNING'))\n    drop('SESSION')\n\nThe next step up in being more pythonic is to import the module\nas a symbol, but still make the assumption that python is running\na single ATI program.\n\n    from tnz import ati\n    ati.set('SESSION', 'SES1')\n    ati.wait(lambda: ati.scrhas('RUNNING'))\n    ati.drop('SESSION')\n\nIn a more complex program that may manage multiple ATI programs,\nthe Ati class can be imported.\n\n    from tnz.ati import Ati\n    ati = Ati()\n    ati.set('SESSION', 'SES1')\n    ati.wait(lambda: ati.scrhas('RUNNING'))\n    ati.drop('SESSION')\n\nAnd a more pythonic way of using ATI-like variables can be used.\nNote that this bypasses much of the ATI tracing/logging.\n\n    from tnz.ati import Ati\n    ati = Ati()\n    ati.session = 'SES1'\n    ati.wait(lambda: ati.scrhas('RUNNING'))\n    ati.drop('SESSION')\n</code></pre> <p>Special ATI-like variables that did not exist in ATI:</p> <pre><code>LOGCOUNT\n    Default is 9. Can be set to other positive integers. Used\n    only when LOGMAX is non-zero. Used to determine the number of\n    backup logs kept when a log reaches the maximum size. When\n    the number of bytes in the log is about to exceed this value,\n    the log file is closed and a new file is opened for output.\n    The old file will be renamed to end in '.n', where 'n' is the\n    current total number of backups. The first backup will end in\n    '.1', the second in '.2', etc.\n\nLOGMAX\n    Default is 0. Can be set to a positive integer. When\n    non-zero, value is the number of bytes at which log\n    rollover/rotation occurs. When the number of bytes in the log\n    is about to exceed this value, the log file is closed and a\n    new file is opened for output.\n\nLOGTRUNC\n    Default is 1. Can be set to 0 or 1. Affects processing done\n    when LOGDEST is set. When 1 and LOGDEST identifies an\n    existing file, the file will be truncated to 0 bytes before\n    logging begins. When 0 and LOGDEST identifies an existing\n    file, log entries will be appended to the existing file.\n    After LOGDEST is set to a file, LOGTRUNC is set to 0.\n</code></pre> Environment variables used <p>COLORTERM (see _termlib.py) DATEFORM ESCDELAY (see zti.py) SESSION_PS_SIZE TERM_PROGRAM (see _termlib.py) TNZ_COLORS (see tnz.py) TNZ_LOGGING (see tnz.py) ZTI_AUTOSIZE (see zti.py) ZTI_SECLEVEL (see tnz.py) ZTI_TITLE (see zti.py) _BPX_TERMPATH (see _termlib.py)</p> <p>Copyright 2021, 2023 IBM Inc. All Rights Reserved.</p> <p>SPDX-License-Identifier: Apache-2.0</p>"},{"location":"ati-compat/#tnz.ati.CASI","title":"CASI  <code>module-attribute</code>","text":"<pre><code>CASI = _AtiConst('CASI')\n</code></pre>"},{"location":"ati-compat/#tnz.ati.EOL","title":"EOL  <code>module-attribute</code>","text":"<pre><code>EOL = _AtiConst('EOL')\n</code></pre>"},{"location":"ati-compat/#tnz.ati.FALSE","title":"FALSE  <code>module-attribute</code>","text":"<pre><code>FALSE = '0'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.FIRST","title":"FIRST  <code>module-attribute</code>","text":"<pre><code>FIRST = _AtiConst('FIRST')\n</code></pre>"},{"location":"ati-compat/#tnz.ati.LAST","title":"LAST  <code>module-attribute</code>","text":"<pre><code>LAST = _AtiConst('LAST')\n</code></pre>"},{"location":"ati-compat/#tnz.ati.OFF","title":"OFF  <code>module-attribute</code>","text":"<pre><code>OFF = _AtiConst('OFF')\n</code></pre>"},{"location":"ati-compat/#tnz.ati.ON","title":"ON  <code>module-attribute</code>","text":"<pre><code>ON = _AtiConst('ON')\n</code></pre>"},{"location":"ati-compat/#tnz.ati.TRUE","title":"TRUE  <code>module-attribute</code>","text":"<pre><code>TRUE = '1'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.backtab","title":"backtab  <code>module-attribute</code>","text":"<pre><code>backtab = '[backtab]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.btab","title":"btab  <code>module-attribute</code>","text":"<pre><code>btab = '[backtab]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.cdn","title":"cdn  <code>module-attribute</code>","text":"<pre><code>cdn = '[down]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.clear","title":"clear  <code>module-attribute</code>","text":"<pre><code>clear = '[clear]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.clf","title":"clf  <code>module-attribute</code>","text":"<pre><code>clf = '[left]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.copies","title":"copies","text":"<pre><code>copies(string, cnt)\n</code></pre> <p>returns cnt concatenated copies of string. The cnt must be a positive whole number or zero.</p>"},{"location":"ati-compat/#tnz.ati.crt","title":"crt  <code>module-attribute</code>","text":"<pre><code>crt = '[right]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.cup","title":"cup  <code>module-attribute</code>","text":"<pre><code>cup = '[up]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.curdown","title":"curdown  <code>module-attribute</code>","text":"<pre><code>curdown = '[down]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.curleft","title":"curleft  <code>module-attribute</code>","text":"<pre><code>curleft = '[left]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.curright","title":"curright  <code>module-attribute</code>","text":"<pre><code>curright = '[right]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.curup","title":"curup  <code>module-attribute</code>","text":"<pre><code>curup = '[up]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.delete","title":"delete  <code>module-attribute</code>","text":"<pre><code>delete = '[delete]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.drop","title":"drop","text":"<pre><code>drop(*args)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.enter","title":"enter  <code>module-attribute</code>","text":"<pre><code>enter = '[enter]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.eraseeof","title":"eraseeof  <code>module-attribute</code>","text":"<pre><code>eraseeof = '[eraseeof]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.ereof","title":"ereof  <code>module-attribute</code>","text":"<pre><code>ereof = '[eraseeof]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.extract","title":"extract","text":"<pre><code>extract(*args, wc=None)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.home","title":"home  <code>module-attribute</code>","text":"<pre><code>home = '[home]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.index","title":"index","text":"<pre><code>index(haystack, needle, start=1)\n</code></pre> <p>returns the character position of one string, needle, in another, haystack, or returns 0 if the string needle is not found or is a null string. By default the search starts at the first character of haystack (start has the value 1). You can override this by specifying a different start point, which must be a positive whole number.</p>"},{"location":"ati-compat/#tnz.ati.ins","title":"ins  <code>module-attribute</code>","text":"<pre><code>ins = '[insert]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.insert","title":"insert  <code>module-attribute</code>","text":"<pre><code>insert = '[insert]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.left","title":"left","text":"<pre><code>left(string, length, pad=' ')\n</code></pre> <p>returns a string of length length, containing the leftmost length characters of string. The string returned is padded with pad characters (or truncated) on the right as needed. The default pad character is a blank. length must be a positive whole number or zero.</p>"},{"location":"ati-compat/#tnz.ati.length","title":"length","text":"<pre><code>length(string)\n</code></pre> <p>returns the length of string.</p>"},{"location":"ati-compat/#tnz.ati.logwrt","title":"logwrt","text":"<pre><code>logwrt(value)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.newline","title":"newline  <code>module-attribute</code>","text":"<pre><code>newline = '[newline]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.nl","title":"nl  <code>module-attribute</code>","text":"<pre><code>nl = '[newline]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.num","title":"num  <code>module-attribute</code>","text":"<pre><code>num = num\n</code></pre>"},{"location":"ati-compat/#tnz.ati.numvalue","title":"numvalue","text":"<pre><code>numvalue(name, trace=None)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pa1","title":"pa1  <code>module-attribute</code>","text":"<pre><code>pa1 = '[pa1]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pa2","title":"pa2  <code>module-attribute</code>","text":"<pre><code>pa2 = '[pa2]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pa3","title":"pa3  <code>module-attribute</code>","text":"<pre><code>pa3 = '[pa3]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf01","title":"pf01  <code>module-attribute</code>","text":"<pre><code>pf01 = '[pf01]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf02","title":"pf02  <code>module-attribute</code>","text":"<pre><code>pf02 = '[pf02]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf03","title":"pf03  <code>module-attribute</code>","text":"<pre><code>pf03 = '[pf03]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf04","title":"pf04  <code>module-attribute</code>","text":"<pre><code>pf04 = '[pf04]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf05","title":"pf05  <code>module-attribute</code>","text":"<pre><code>pf05 = '[pf05]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf06","title":"pf06  <code>module-attribute</code>","text":"<pre><code>pf06 = '[pf06]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf07","title":"pf07  <code>module-attribute</code>","text":"<pre><code>pf07 = '[pf07]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf08","title":"pf08  <code>module-attribute</code>","text":"<pre><code>pf08 = '[pf08]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf09","title":"pf09  <code>module-attribute</code>","text":"<pre><code>pf09 = '[pf09]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf1","title":"pf1  <code>module-attribute</code>","text":"<pre><code>pf1 = '[pf1]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf10","title":"pf10  <code>module-attribute</code>","text":"<pre><code>pf10 = '[pf10]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf11","title":"pf11  <code>module-attribute</code>","text":"<pre><code>pf11 = '[pf11]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf12","title":"pf12  <code>module-attribute</code>","text":"<pre><code>pf12 = '[pf12]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf13","title":"pf13  <code>module-attribute</code>","text":"<pre><code>pf13 = '[pf13]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf14","title":"pf14  <code>module-attribute</code>","text":"<pre><code>pf14 = '[pf14]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf15","title":"pf15  <code>module-attribute</code>","text":"<pre><code>pf15 = '[pf15]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf16","title":"pf16  <code>module-attribute</code>","text":"<pre><code>pf16 = '[pf16]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf17","title":"pf17  <code>module-attribute</code>","text":"<pre><code>pf17 = '[pf17]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf18","title":"pf18  <code>module-attribute</code>","text":"<pre><code>pf18 = '[pf18]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf2","title":"pf2  <code>module-attribute</code>","text":"<pre><code>pf2 = '[pf2]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf20","title":"pf20  <code>module-attribute</code>","text":"<pre><code>pf20 = '[pf20]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf21","title":"pf21  <code>module-attribute</code>","text":"<pre><code>pf21 = '[pf21]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf22","title":"pf22  <code>module-attribute</code>","text":"<pre><code>pf22 = '[pf22]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf23","title":"pf23  <code>module-attribute</code>","text":"<pre><code>pf23 = '[pf23]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf24","title":"pf24  <code>module-attribute</code>","text":"<pre><code>pf24 = '[pf24]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf3","title":"pf3  <code>module-attribute</code>","text":"<pre><code>pf3 = '[pf3]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf4","title":"pf4  <code>module-attribute</code>","text":"<pre><code>pf4 = '[pf4]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf5","title":"pf5  <code>module-attribute</code>","text":"<pre><code>pf5 = '[pf5]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf6","title":"pf6  <code>module-attribute</code>","text":"<pre><code>pf6 = '[pf6]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf7","title":"pf7  <code>module-attribute</code>","text":"<pre><code>pf7 = '[pf7]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf8","title":"pf8  <code>module-attribute</code>","text":"<pre><code>pf8 = '[pf8]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.pf9","title":"pf9  <code>module-attribute</code>","text":"<pre><code>pf9 = '[pf9]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.rename","title":"rename","text":"<pre><code>rename(name)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.reset","title":"reset  <code>module-attribute</code>","text":"<pre><code>reset = '[reset]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.right","title":"right","text":"<pre><code>right(string, length, pad=' ')\n</code></pre> <p>returns a string of length length containing the rightmost length characters of string. The string returned is padded with pad characters (or truncated) on the left as needed. The default pad character is a blank. The length must be a positive whole number or zero.</p>"},{"location":"ati-compat/#tnz.ati.say","title":"say","text":"<pre><code>say(value)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.scrhas","title":"scrhas","text":"<pre><code>scrhas(*args, wc=None)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.send","title":"send","text":"<pre><code>send(*args)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.set","title":"set","text":"<pre><code>set(name, value, xtern=True, trace=None)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.share","title":"share","text":"<pre><code>share(*args)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.strip","title":"strip","text":"<pre><code>strip(string, option='B', char=' ')\n</code></pre> <p>returns string with leading or trailing characters or both removed, based on the option you specify. The following are valid options. (Only the capitalized letter is needed; all characters following it are ignored.)</p> <p>Both     removes both leading and trailing characters from string.     This is the default.</p> <p>Leading     removes leading characters from string.</p> <p>Trailing     removes trailing characters from string.</p> <p>The third argument, char, specifies the character to be removed, and the default is a blank. With rexx, if you specify char, it must be exactly one character long. With this function, all characters specified in the char string are considered for removal from string.</p> <p>Here are some examples:</p> <p>strip('  ab c  ')           -&gt; 'ab c' strip('  ab c  ','L')       -&gt; 'ab c  ' strip('  ab c  ','t')       -&gt; '  ab c' strip('12.7000',char='0')   -&gt; '12.7' strip('0012.700',char='0')  -&gt; '12.7'</p>"},{"location":"ati-compat/#tnz.ati.stripl","title":"stripl  <code>module-attribute</code>","text":"<pre><code>stripl = lstrip\n</code></pre>"},{"location":"ati-compat/#tnz.ati.stript","title":"stript  <code>module-attribute</code>","text":"<pre><code>stript = rstrip\n</code></pre>"},{"location":"ati-compat/#tnz.ati.substr","title":"substr","text":"<pre><code>substr(string, idx, length=None, pad=' ')\n</code></pre> <p>returns the substring of string that begins at the idx'th character and is of length length, padded with pad if necessary.</p> <p>In rexx, idx must be a positive whole number. In this function, idx can also be negative. When idx is negative, the begining of the substring is relative to the end of string like in python. For example, -1 refers to the last chararacter in string and -2 refers to the second to last character in string and so on.</p> <p>In this function, length can be negative. A negative length means that idx refers to the last character in the substring instead of the first. The length of the returned substring is always abs(length).</p> <p>If you omit length, the rest of the string is returned. The default pad character is a blank.</p> <p>Here are some examples:</p> <p>substr('abc',2)          -&gt;    'bc' substr('abc',2,4)        -&gt;    'bc  ' substr('abc',2,6,'.')    -&gt;    'bc....'</p> <p>See also the 'left' and 'right' functions.</p>"},{"location":"ati-compat/#tnz.ati.tab","title":"tab  <code>module-attribute</code>","text":"<pre><code>tab = '[tab]'\n</code></pre>"},{"location":"ati-compat/#tnz.ati.upper","title":"upper  <code>module-attribute</code>","text":"<pre><code>upper = upper\n</code></pre>"},{"location":"ati-compat/#tnz.ati.value","title":"value","text":"<pre><code>value(name, trace=None)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.wait","title":"wait","text":"<pre><code>wait(*args)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.when","title":"when","text":"<pre><code>when(*args)\n</code></pre>"},{"location":"ati-compat/#tnz.ati.word","title":"word","text":"<pre><code>word(string, wpos)\n</code></pre> <p>returns the nth blank-delimited word in string or returns the null string if fewer than n words are in string. The n must be a positive whole number. This function is exactly equivalent to subword(string,n,1).</p>"},{"location":"ati-compat/#tnz.ati.words","title":"words","text":"<pre><code>words(sentence)\n</code></pre> <p>returns the number of blank-delimited words in string.</p>"},{"location":"ati/","title":"ati","text":"<p>ATI tnz interface</p> <p>ATI (Automated Task Interpreter) was an IBM-internal language/runtime built for automating 3270 terminal interaction. It had a syntax very similar to Rexx. This module is intended to help with porting ATI code to python. It is also the base of the zti tool.</p> <p>Some of these functions have enhancements on top of the ATI function. Enhancments include using a negative index/position or length to indicate a position relative to the END of the string. See individual functions for details.</p> <p>USAGE     The way to make a python script that is most like ATI source code     is to use 'import *'. Be warned that this will override the 'set'     symbol (otherwise a python builtin function).</p> <pre><code>    from tnz.ati import *\n    set('SESSION', 'SES1')\n    wait(lambda: scrhas('RUNNING'))\n    drop('SESSION')\n\nThe next step up in being more pythonic is to import the module\nas a symbol, but still make the assumption that python is running\na single ATI program.\n\n    from tnz import ati\n    ati.set('SESSION', 'SES1')\n    ati.wait(lambda: ati.scrhas('RUNNING'))\n    ati.drop('SESSION')\n\nIn a more complex program that may manage multiple ATI programs,\nthe Ati class can be imported.\n\n    from tnz.ati import Ati\n    ati = Ati()\n    ati.set('SESSION', 'SES1')\n    ati.wait(lambda: ati.scrhas('RUNNING'))\n    ati.drop('SESSION')\n\nAnd a more pythonic way of using ATI-like variables can be used.\nNote that this bypasses much of the ATI tracing/logging.\n\n    from tnz.ati import Ati\n    ati = Ati()\n    ati.session = 'SES1'\n    ati.wait(lambda: ati.scrhas('RUNNING'))\n    ati.drop('SESSION')\n</code></pre> <p>Special ATI-like variables that did not exist in ATI:</p> <pre><code>LOGCOUNT\n    Default is 9. Can be set to other positive integers. Used\n    only when LOGMAX is non-zero. Used to determine the number of\n    backup logs kept when a log reaches the maximum size. When\n    the number of bytes in the log is about to exceed this value,\n    the log file is closed and a new file is opened for output.\n    The old file will be renamed to end in '.n', where 'n' is the\n    current total number of backups. The first backup will end in\n    '.1', the second in '.2', etc.\n\nLOGMAX\n    Default is 0. Can be set to a positive integer. When\n    non-zero, value is the number of bytes at which log\n    rollover/rotation occurs. When the number of bytes in the log\n    is about to exceed this value, the log file is closed and a\n    new file is opened for output.\n\nLOGTRUNC\n    Default is 1. Can be set to 0 or 1. Affects processing done\n    when LOGDEST is set. When 1 and LOGDEST identifies an\n    existing file, the file will be truncated to 0 bytes before\n    logging begins. When 0 and LOGDEST identifies an existing\n    file, log entries will be appended to the existing file.\n    After LOGDEST is set to a file, LOGTRUNC is set to 0.\n</code></pre> Environment variables used <p>COLORTERM (see _termlib.py) DATEFORM ESCDELAY (see zti.py) SESSION_PS_SIZE TERM_PROGRAM (see _termlib.py) TNZ_COLORS (see tnz.py) TNZ_LOGGING (see tnz.py) ZTI_AUTOSIZE (see zti.py) ZTI_SECLEVEL (see tnz.py) ZTI_TITLE (see zti.py) _BPX_TERMPATH (see _termlib.py)</p> <p>Copyright 2021, 2023 IBM Inc. All Rights Reserved.</p> <p>SPDX-License-Identifier: Apache-2.0</p>"},{"location":"ati/#tnz.ati-attributes","title":"Attributes","text":""},{"location":"ati/#tnz.ati.ati","title":"ati  <code>module-attribute</code>","text":"<pre><code>ati = Ati()\n</code></pre>"},{"location":"ati/#tnz.ati-classes","title":"Classes","text":""},{"location":"ati/#tnz.ati.Ati","title":"Ati","text":"<p>Automate a set of 3270 terminal sessions.</p> Methods with ATI function equivalents <ul> <li>drop</li> <li>extract</li> <li>logwrt</li> <li>num</li> <li>say</li> <li>scrhas</li> <li>send</li> <li>set</li> <li>share  <li>value</li> <li>wait</li> <li>when</li> <p>Methods from tnz.rexx with ATI function equivalents:     copies     index     left     length     right     strip     substr     word     words</p> Methods from Python with ATI function equivalents <ul> <li>stripl</li> <li>stript</li> <li>upper</li> </ul> ATI functions with no equivalent method implemented <ul> <li>chr</li> <li>cms</li> <li>include</li> <li>keywait</li> <li>ord</li> <li>pull</li> <li>push</li> </ul> Properties with internal ATI variable equivalents <ul> <li>age</li> <li>curcol</li> <li>currow</li> <li>date</li> <li>datetime</li> <li>display</li> <li>hitcol</li> <li>hitrow</li> <li>hitstr</li> <li>keylock</li> <li>keyunlock</li> <li>logdest</li> <li>maxcol</li> <li>maxrow</li> <li>maxlostwarn</li> <li>maxwait</li> <li>milliage</li> <li>onerror</li> <li>rc</li> <li>sendstr</li> <li>seslost</li> <li>session</li> <li>sessionid</li> <li>sessions</li> <li>session24</li> <li>showline</li> <li>showtype</li> <li>time</li> <li>trace</li> <li>waitsleep</li> </ul>"},{"location":"ati/#tnz.ati.Ati-attributes","title":"Attributes","text":""},{"location":"ati/#tnz.ati.Ati.age","title":"age  <code>property</code> <code>writable</code>","text":"<pre><code>age\n</code></pre> <p>Program Age in Seconds</p> <p>If unchanged by the program, contains the number of seconds that have elapsed since the program execution started.</p> <p>Usage Notes:</p> <pre><code>- At the start of program execution, AGE is set to 0.\n\n- AGE is incremented once a second\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.audit","title":"audit  <code>property</code> <code>writable</code>","text":"<pre><code>audit\n</code></pre> <p>Set to 1 to enable audit tracing. Like TRACE='HOST', but screens are only traced when an AID is sent.</p>"},{"location":"ati/#tnz.ati.Ati.connected","title":"connected  <code>instance-attribute</code>","text":"<pre><code>connected = True\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.curcol","title":"curcol  <code>property</code>","text":"<pre><code>curcol\n</code></pre> <p>Cursor column value for current session.</p>"},{"location":"ati/#tnz.ati.Ati.currow","title":"currow  <code>property</code>","text":"<pre><code>currow\n</code></pre> <p>Cursor row value for current session.</p>"},{"location":"ati/#tnz.ati.Ati.date","title":"date  <code>property</code>","text":"<pre><code>date\n</code></pre> <p>Current Date</p> <p>Contains the current date in the form mm/dd/yy. To get the date in mm/dd/yyyy form, set the DATEFORM environment variable to LONG (in any case).</p>"},{"location":"ati/#tnz.ati.Ati.datetime","title":"datetime  <code>property</code>","text":"<pre><code>datetime\n</code></pre> <p>Current Date/Time</p> <p>Contains the current date and time in the form <code>yy/mm/dd hh:mm:ss</code>. To get the date in <code>yyyy/mm/dd hh:mm:ss</code> form, set the DATEFORM environment variable to LONG (in any case).</p>"},{"location":"ati/#tnz.ati.Ati.display","title":"display  <code>property</code> <code>writable</code>","text":"<pre><code>display\n</code></pre> <p>Display Controls</p> <p>Determines how much host or Ati activity is displayed during program execution. Valid values:</p> <p>NONE     No host or Ati activity is displayed. This is the default     setting.</p> <p>ALL     Displays both host screens and Ati functions in an     alternating manner.</p> <p>CODE     Displays a trace of the current Ati program.</p> <p>HOST     Displays the entire host screen whenever it is referenced.</p> <p>HOSTCODE     Displays the current ATI statement on the bottom line of     the display with the upper part of the screen showing the     current session.</p> <p>RESULTS     Displays the results of function calls along with the Ati     function calls as they are being executed.</p> <p>SINGLE     Causes single-step tracing to begin, with both host     screens and Ati functions being displayed.</p> <p>Usage Notes:</p> <pre><code>- At the start of program execution, DISPLAY is set to NONE\n\n- DISPLAY is a read/write variable and can be changed at\n  any time during execution.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.hitcol","title":"hitcol  <code>property</code>","text":"<pre><code>hitcol\n</code></pre> <p>The column position of the first character of the string found by SCRHAS or the start column position of an EXTRACT.</p>"},{"location":"ati/#tnz.ati.Ati.hitrow","title":"hitrow  <code>property</code>","text":"<pre><code>hitrow\n</code></pre> <p>The row position of the first character of the string found by SCRHAS or the start row position of an EXTRACT.</p>"},{"location":"ati/#tnz.ati.Ati.hitstr","title":"hitstr  <code>property</code>","text":"<pre><code>hitstr\n</code></pre> <p>String found</p> <p>The string that was found by the scrhas function.</p>"},{"location":"ati/#tnz.ati.Ati.keylock","title":"keylock  <code>property</code>","text":"<pre><code>keylock\n</code></pre> <p>Keyboard status</p> <p>Contains the keyboard status of the active session. Set to '1' if the active session is not accepting any input (keyboard lock); otherwise the value is set to '0'.</p>"},{"location":"ati/#tnz.ati.Ati.keyunlock","title":"keyunlock  <code>property</code> <code>writable</code>","text":"<pre><code>keyunlock\n</code></pre> <p>Keyboard Unlock Wait Time</p> <p>The number of seconds that a send will wait for the keyboard to unlock before it actually sends the data.</p> <p>Usage Notes:</p> <pre><code>KEYUNLOCK defaults to 60 (1 minute). If the KEYUNLOCK\nwait period expires due to a locked keyboard, the session\nis dropped (disconnected). In the rare case that an\napplication stays in keyboard lock and the user would\nlike to wait for it to unlock longer than the 1-minute\ndefault, KEYUNLOCK can be used to lengthen the time that\na SEND waits.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.logcount","title":"logcount  <code>property</code> <code>writable</code>","text":"<pre><code>logcount\n</code></pre> <p>Number of logs being managed.</p> <p>Default is 9. Can be set to other positive integers. Used only when LOGMAX is non-zero. Used to determine the number of backup logs kept when a log reaches the maximum size. When the number of bytes in the log is about to exceed this value, the log file is closed and a new file is opened for output. The old file will be renamed to end in '.n', where 'n' is the current total number of backups. The first backup will end in '.1', the second in '.2', etc.</p>"},{"location":"ati/#tnz.ati.Ati.logdest","title":"logdest  <code>property</code> <code>writable</code>","text":"<pre><code>logdest\n</code></pre> <p>Log Destination/File</p> <p>The name of the file where the history is recorded.</p> <p>Usage Notes:</p> <pre><code>- If the file specified by expression already exists, the\n  the log may be appended or truncated. See LOGTRUNC.\n</code></pre> <p>Return Codes (internal variable RC):</p> <pre><code> 0  A handler is registered for the specified file\n\n -  other RC values if a failure occurred?\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.logmax","title":"logmax  <code>property</code> <code>writable</code>","text":"<pre><code>logmax\n</code></pre> <p>Maximum size of log file</p> <p>Default is 0. Can be set to a positive integer. When non-zero, value is the number of bytes at which log rollover/rotation occurs. When the number of bytes in the log is about to exceed this value, the log file is closed and a new file is opened for output.</p>"},{"location":"ati/#tnz.ati.Ati.logtrunc","title":"logtrunc  <code>property</code> <code>writable</code>","text":"<pre><code>logtrunc\n</code></pre> <p>Determine if existing log data is truncated (deleted)</p> <p>Default is 1. Can be set to 0 or 1. Affects processing done when LOGDEST is set. When 1 and LOGDEST identifies an existing file, the file will be truncated to 0 bytes before logging begins. When 0 and LOGDEST identifies an existing file, log entries will be appended to the existing file. After LOGDEST is set to a file, LOGTRUNC is set to 0.</p>"},{"location":"ati/#tnz.ati.Ati.maxcol","title":"maxcol  <code>property</code>","text":"<pre><code>maxcol\n</code></pre> <p>Maximum column value for current session.</p>"},{"location":"ati/#tnz.ati.Ati.maxlostwarn","title":"maxlostwarn  <code>property</code> <code>writable</code>","text":"<pre><code>maxlostwarn\n</code></pre> <p>Maximum Lost Session Warnings</p> <p>Specifies the default maximum number of Lost Session warnings that will be output before the progem is aborted.</p> <p>Usage notes:</p> <pre><code>- If MAXLOSTWARN is set to 0, the automatic aborting\n  feature is disabled and an unlimited number of Warning\n  12s can appear without the program aborting.\n\n- Upon program initialization MAXLOSTWARN is set to 5.\n\n- The setting of MAXLOSTWARN can be changed at any time\n  during program execution.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.maxrow","title":"maxrow  <code>property</code>","text":"<pre><code>maxrow\n</code></pre> <p>Maximum row value for current session.</p>"},{"location":"ati/#tnz.ati.Ati.maxwait","title":"maxwait  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxwait = property(None, __maxwait, None, __doc__)\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.milliage","title":"milliage  <code>property</code>","text":"<pre><code>milliage\n</code></pre> <p>Program age in milliseconds</p> <p>Contains the number of milliseconds that have elapsed since the object instance global context was created.</p>"},{"location":"ati/#tnz.ati.Ati.onerror","title":"onerror  <code>property</code> <code>writable</code>","text":"<pre><code>onerror\n</code></pre> <p>Control error handler</p> <p>Turns the error handler on or off.</p>"},{"location":"ati/#tnz.ati.Ati.pgmname","title":"pgmname  <code>instance-attribute</code>","text":"<pre><code>pgmname = None\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.rc","title":"rc  <code>property</code> <code>writable</code>","text":"<pre><code>rc\n</code></pre> <p>Return Code</p> <p>The return code from the last function that caused a return code to be generated.</p>"},{"location":"ati/#tnz.ati.Ati.scrdelay","title":"scrdelay  <code>property</code> <code>writable</code>","text":"<pre><code>scrdelay\n</code></pre> <p>Screen Save Delay</p> <p>Not implemented.</p>"},{"location":"ati/#tnz.ati.Ati.scrlibs","title":"scrlibs  <code>property</code> <code>writable</code>","text":"<pre><code>scrlibs\n</code></pre> <p>Screen Library Search List</p> <p>Not implemented</p>"},{"location":"ati/#tnz.ati.Ati.scrupdate","title":"scrupdate  <code>property</code> <code>writable</code>","text":"<pre><code>scrupdate\n</code></pre> <p>Screen Comparison/Save Control</p> <p>Not implemented.</p>"},{"location":"ati/#tnz.ati.Ati.sendstr","title":"sendstr  <code>property</code>","text":"<pre><code>sendstr\n</code></pre> <p>Sent string</p> <p>Contains the last string that was passed to the host session.</p>"},{"location":"ati/#tnz.ati.Ati.ses_exc","title":"ses_exc  <code>instance-attribute</code>","text":"<pre><code>ses_exc = None\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.seslost","title":"seslost  <code>property</code>","text":"<pre><code>seslost\n</code></pre> <p>Lost session identifier</p> <p>Contains the name of the session that was abnormally lost.</p> Usage Notes <ul> <li> <p>This variable can be used to check if a session has 'gone   away'; i.e., PVM drop, Mysterious Logical Device Support   Drop, Excessive Keyboard Lock Drop, and so on. This   variable is set upon a session assignment, wait, or send   functions.</p> </li> <li> <p>It is initialized to null (''), and it is set to null   after a successful session assignment.</p> </li> </ul>"},{"location":"ati/#tnz.ati.Ati.session","title":"session  <code>property</code> <code>writable</code>","text":"<pre><code>session\n</code></pre> <p>Current/Active Session</p> <p>Establish/determine the session for host interaction.</p> <p>Usage Notes:</p> <pre><code>- The purpose of SESSION is to enable you to control\n  multiple sessions within a single program. By\n  establishing different sessions with unique names, you\n  can change the current/active session at any time.\n\n- A program can check the return code after a SESSION a\n  assignment. If the session had existed and a RC=12 is\n  set, then the session has 'gone away' since the last\n  interaction because of a PVM drop, Mysterious Logical\n  Device Support Drop, Excessive Keyboard Lock Drop, and\n  so on. See SESLOST -- Lost Session Identifier.\n\n- This setting can be changed at any time during program\n  execution.\n</code></pre> <p>Return Codes (internal variable RC):</p> <pre><code> 0  New session was established\n\n 1  Session specified was established previously\n\n 8  Unable to establish session\n\n12  Session specified was lost or undefined\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.session24","title":"session24  <code>property</code> <code>writable</code>","text":"<pre><code>session24\n</code></pre> <p>Limit Session Terminal Type</p> <p>Limits new sessions to 24x80 with no extended attributes.</p> <p>Usage Notes:</p> <pre><code>- SESSION24 is not session specific; i.e. if it is set to\n  TRUE, it is active on all newly created sessions until\n  it is set to FALSE.\n\n- The default SESSION24 value comes from the SESSION24\n  environment variable.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.sessionid","title":"sessionid  <code>property</code> <code>writable</code>","text":"<pre><code>sessionid\n</code></pre> <p>Control Session Name Display</p> <p>Not implemented</p>"},{"location":"ati/#tnz.ati.Ati.sessions","title":"sessions  <code>property</code>","text":"<pre><code>sessions\n</code></pre> <p>Available sessions</p> <p>A space-separated list of names of active sessions.</p>"},{"location":"ati/#tnz.ati.Ati.showline","title":"showline  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>showline = property(None, __showline, None, __doc__)\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.showtype","title":"showtype  <code>property</code> <code>writable</code>","text":"<pre><code>showtype\n</code></pre> <p>Controls Send To Screen</p> <p>Setting to 1 (TRUE) causes the send data to be displayed on the screen of the current session when DISPLAY is set to HOST or HOSTCODE.</p> <p>Usage Notes:</p> <pre><code>- SHOWTYPE can be left FALSE; however, when dealing with\n  panel applications, CMS, or CP, this feature can\n  greatly aid debugging.\n\n- The value of SHOWTYPE can be set to TRUE or FALSE\n  throughout the program. SHOWTYPE is not session\n  specific; i.e., if it is set TRUE, it affects all\n  sessions in the program until it is set FALSE.\n\n- The default SHOWTYPE value comes from the SHOWTYPE\n  environment variable.\n\n- The send data is automatically suppressed if the\n  application being executed on the particular session\n  addresses the screen in a no non-fullscreen mode\n  Therefore, the echo does not operate with all\n  applications.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.time","title":"time  <code>property</code>","text":"<pre><code>time\n</code></pre> <p>Current Time</p> <p>Contains the current time in the form <code>hh:mm:ss</code>.</p>"},{"location":"ati/#tnz.ati.Ati.trace","title":"trace  <code>property</code> <code>writable</code>","text":"<pre><code>trace\n</code></pre> <p>Control Tracking/Logging</p> <p>Specifies the type of information that is written to the log file. Valid values:</p> <p>NONE     No extra information is recorded. This is the default     setting.</p> <p>ALL     Sends all information from each of the other options to the     log file.</p> <p>CAPTURE     Logs the current session's screen and returns the TRACE     variable to its previous value.</p> <p>CODE     Logs a trace of the function calls that involve an Ati     instance method.</p> <p>ERROR     Causes logging to be done when either of the following     errors occur:</p> <pre><code>- A wait function containing an expression times out\n  (returns a 0 code)\n\n- A FIRST or LAST character string in an extract or scrhas\n  function call was not found on the host screen. The\n  FIRST or LAST character string is recorded.\n</code></pre> <p>HOST     Logs each host screen as it is scanned. The screen     dimensions, cursor position keyboard lock flag, and time     are also logged above the screen data.</p> <p>RESULTS     Logs a trace of the results of function calls that     involve an Ati instance method.</p>"},{"location":"ati/#tnz.ati.Ati.waitsleep","title":"waitsleep  <code>property</code> <code>writable</code>","text":"<pre><code>waitsleep\n</code></pre> <p>Check interval for wait/when</p> <p>Sets the time interval (in seconds) that the wait function conditions and active when functions are checked. Can be an integer from 1 to 99.</p> <p>Usage Notes:</p> <ul> <li> <p>Initialized to 1. That is, the condition of a wait     function is checked every second or every screen update     until the wait condition is satisfied or the wait times     out. This value is used to improve system performance by     increasing the time between wait rechecks to longer     intervals.</p> </li> <li> <p>Does not affect the length of a wait. For example, if     waitsleep=10 and a 2-second wait is requested, the     maximum wait time is still only 2 seconds, which is     checked in one interval.</p> </li> </ul>"},{"location":"ati/#tnz.ati.Ati-functions","title":"Functions","text":""},{"location":"ati/#tnz.ati.Ati.drop","title":"drop","text":"<pre><code>drop(*args)\n</code></pre> <p>Delete user-defined variable(s).</p> <p>Drops one or more user-defined variable(s) or host sessions from memory. DROP will cause the value of a variable to be reset to its name in capital letters. DROP can be used safely on non-GLOBAL variables. Note that statement labels and WHEN labels cannot be dropped. Please see 'DROPPING A GLOBAL VARIABLE' for the consequences of dropping a GLOBAL variable.</p> <p>(ATI)      DROP varname1 [ \u2026 ] | SESSION</p> <p>(python)      drop(varname1[,varname2\u2026])</p> where <ul> <li> <p>varname1, etc. are previously defined user variables.</p> </li> <li> <p>SESSION will cause the current host session to be released.   If the session was a CMS userid, it will be disconnected,   and   if it is not reconnected within 15 minutes, it will be   logged   off by CP.</p> </li> </ul> EXAMPLE <p>DROP counter password</p> where <ul> <li>'counter' and 'password' are variables. After the DROP,   their   values will be 'COUNTER' and 'PASSWORD', respectively.</li> <li>Dropping SESSION when it has a value of 'NONE' will cause a   run time warning to occur.</li> </ul> <p>RETURN CODES     Not affected</p>"},{"location":"ati/#tnz.ati.Ati.escape","title":"escape  <code>staticmethod</code>","text":"<pre><code>escape(text)\n</code></pre> <p>Escape special characters in text.</p> <p>Return a text string that is an escaped version of the input text string. The input text is treated as if it has no mneumonics and the returned text can be used as input to send without having any of it interpreted as a mneumonic.</p>"},{"location":"ati/#tnz.ati.Ati.extract","title":"extract","text":"<pre><code>extract(*args, wc=None)\n</code></pre> <p>Return a text string from the host screen.</p> <p>Usage/Syntax:</p> <pre><code>extract({length | EOL}[, location][, wc='*'])\n\nlocation:\n    (r, c) | {FIRST|LAST}, string[, (xr, xc)][, wc='*']\n</code></pre> <p>length     A numeric value specifying the length of the string to     be extracted from the host screen.</p> <p>EOL     Causes the extraction to reach as far as the end of     the host screen line where it began.</p> <p>(r, c)     An absolute begin-extraction location on the host     screen. It can be used instead of the FIRST or LAST     sequence if the user knows the coordinates of the     screen where extraction is to begin. The row value     range is between 1 and the height of the host screen     (MAXROW). The column value range is between 1 and the     width of the host screen (MAXCOL). Negative values for     r and c can be used and are interpreted as relative to     the height and width of the screen, respectively. For     example specifying -1 for r is interpretaed as the     last (bottom) row of the screen. Default is (1, 1).</p> <p>FIRST     Indicates that the begin-extraction location on the     host screen is after the location of the first     occurrence of string on the current host screen.</p> <p>LAST     Indicates that the begin-extraction location on the     host screen is after the location of the last     occurrence of string on the current host screen.</p> <p>string     The string to be searched for on the host screen.</p> <p>(xr, xc)     A relative row-column offset from the located string.     The xr and xc fields are integers that represent the     offset to the location of the extraction. In     calculating this address, if the vertical edge of the     host screen is encountered, a wrap-around to the next     row wil occur and the offset counting then continues     at this new location.</p> <pre><code>The value for xr can range from -MAXROW to MAXROW. The\nvalue for xc can range from -MAXCOL to MAXCOL. For\nexample, (1, -10) would set the extraction location to\none row below and ten columns to the left of the first\ncharacter in string.\n\nIf (xr, xc) is not provided, the begin-extraction\nlocation defaults to one character to the right of\nstring. The relative location could be defined as (0,\nn) if string has a length of n.\n</code></pre> <p>wc=''     Indicates that '' is the wildcard character in     string. If more than one character is specified in the     wildcard string, only the first character is used. If     a null is specified, no wildcard is set. The '*' is a     place holder that is not compared to the corresponding     character in the string being tested on the host     screen.</p> <p>Usage Notes:</p> <pre><code>- The string is searched for on the host screen by\n  increasing columns and rows (from top to bottom of\n  screen, with each row being searched left to right).\n\n- Absolute (r, c) is mutually exclusive with the\n  FIRST/LAST and string option sequence.\n\n- If the extraction occurs, HITROW and HITCOL is set\n  to the location where the extraction began.\n</code></pre> <p>Return Codes (internal variable RC):</p> <pre><code> 0  The extraction was completed successfully.\n\n 3  The extraction length was less than one; null\n    string returned.\n\n 6  The FIRST and LAST character string was not\n    found; null string returned.\n\n 7  Error in the FIRST or LAST sequence relative\n    address specification null string returned.\n\n 8  The begin-address specification exceeds screen\n    bounds; null string returned.\n\n 9  The extraction extended beyond screen bounds;\n    result truncated.\n\n12  Session lost or undefined; null string returned.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.get_asyncio_event_loop","title":"get_asyncio_event_loop","text":"<pre><code>get_asyncio_event_loop()\n</code></pre> <p>Return the asyncio event and loop as a tuple.</p>"},{"location":"ati/#tnz.ati.Ati.get_tnz","title":"get_tnz","text":"<pre><code>get_tnz(name=None)\n</code></pre> <p>Return session Tnz instance.</p> <p>Or None if there is none.</p>"},{"location":"ati/#tnz.ati.Ati.keys","title":"keys","text":"<pre><code>keys()\n</code></pre> <p>Like dict.keys</p>"},{"location":"ati/#tnz.ati.Ati.logwrt","title":"logwrt","text":"<pre><code>logwrt(value)\n</code></pre> <p>Writes the input string to the current log destination.</p>"},{"location":"ati/#tnz.ati.Ati.new_program","title":"new_program","text":"<pre><code>new_program(share=None, share_sessions=None)\n</code></pre> <p>Create a new instance for a ATI-like program.</p> <p>The new instance will share GLOBAL (including internal) variables.</p>"},{"location":"ati/#tnz.ati.Ati.num","title":"num  <code>staticmethod</code>","text":"<pre><code>num(value)\n</code></pre> <p>Use ATI rules to convert the input string to an integer.</p>"},{"location":"ati/#tnz.ati.Ati.numvalue","title":"numvalue","text":"<pre><code>numvalue(name, trace=None)\n</code></pre> <p>Shorthand for num(value(varname))</p>"},{"location":"ati/#tnz.ati.Ati.rename","title":"rename","text":"<pre><code>rename(name)\n</code></pre> <p>Rename the current session.</p> <p>Changes the name of the current session to the session name specified. The specified session name cannot match the name of a currently established session.</p> <p>This function performs the function of the RENAME option on the GOTO EXEC and overtyping the session name in the ATI session manager.</p>"},{"location":"ati/#tnz.ati.Ati.say","title":"say","text":"<pre><code>say(value)\n</code></pre> <p>Print the input string.</p> <p>Write input string to standard output (likely the terminal). If tracing is active (the internal variable TRACE is set to either CODE or ALL), say will also direct output to the log destination.</p>"},{"location":"ati/#tnz.ati.Ati.scrcomp","title":"scrcomp","text":"<pre><code>scrcomp(value)\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.scrhas","title":"scrhas","text":"<pre><code>scrhas(*args, wc=None)\n</code></pre> <p>Check current screen for a string.</p> <p>Return True if the specified character string exists on the current host screen. Otherwise return False.</p> <p>Usage/Syntax:</p> <pre><code>scrhas(string)               (string is always required)\n\nscrhas(string,wc='*')        (wc is optional to all)\nscrhas(CASI,string)          (CASI is optional to all)\n\nscrhas(string,(r,c))\n\nscrhas(string,FIRST,string2)\nscrhas(string,LAST,string2)\n\nscrhas(string,(r,c),length)\nscrhas(string,(r,c),(r2,c2))\n</code></pre> <p>CASI     Signifies that the screen search is to be done case     independently. Thus, 'Logon' is equivalent to 'LOGON'     or 'logon'.</p> <p>string     The string that is searched for on the host screen.</p> <p>FIRST     Indicates that the begin-search location on the host     screen is after the location of the last character of     the first occurrence of string2 on the current host     screen.</p> <p>LAST     Indicates that the begin-search location on the host     screen is after the location of the last character of     the last occurrence of string2 on the current host     screen.</p> <p>string2     A string that, along with the FIRST or LAST keyword,     specifies the location on the host screen where the     search for the string will begin.</p> <p>(r, c)     An absolute begin-search location on the host screen.     Row \u00ae must be an integer between 1 and the host     screen height (MAXROW). Column \u00a9 is an integer     between 1 and the host screen width (MAXCOL).</p> <p>length     An optional parameter specifying the length of the     area to be searched for the indicated string. If     omitted, the area searched will range from the     specified start position to the end of the screen.</p> <p>(r2, c2)     Specifies an absolute end-search location diagonally     opposite to (r, c). Row (r2) and column (c2) must be     integers from 1 to MAXROW and from 1 to MAXCOL,     respectively. The (r, c) and (r2, c2) define a     rectangular window on the screen where the specified     string is searched for.</p> <p>wc=''     Indicates that '' is the wildcard character in     string. The '*' is a place holder that is not     compared to the corresponding character in the string     being tested on the host screen. The wildcard can be     any character that the user chooses. Whenever a     character is to be interpreted as a wildcard, wc must     be specified.</p> <p>Usage Notes:</p> <pre><code> - The internal variables HITROW, HITCOL, and HITSTR\n   are set by this function if the search is\n   successful.\n\n - If a begin location is not specified, the search\n   will begin at the upper left corner (1:1) of the\n   host screen and will cover the entire screen.\n\n - If string2 is not found on the current host screen,\n   this function returns False.\n\n - Search direction is by increasing columns and rows.\n   (Top to bottom, each row being searched left to\n   right.)\n</code></pre> <p>Return Codes (internal variable RC):</p> <pre><code>  0  The string was found on the host screen.\n     Function returns True.\n\n  1  The string was not found on the host screen.\n     Function returns False.\n\n  6  The FIRST or LAST character string was not found.\n     Function returns False.\n\n  8  The begin-search or end-search location exceeds\n     screen bounds.\n     Function returns False.\n\n 12  Session lost or undefined.\n     Function returns False.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.send","title":"send","text":"<pre><code>send(*args)\n</code></pre> <p>Send string to the active session.</p> <p>Send a string of characters and/or special keys to the active session. The session recognizes them as if the user typed the data interactively at the keyboard and, depending on the data sent, it performs the necessary action.</p> <p>Usage/Syntax:</p> <pre><code>send([(row, col),] string)\n</code></pre> <p>string     The data to be sent to the host screen.</p> <p>(row,col)     The location of the cursor that should be set before the     data is sent to the host screen. The default is the     current cursor location.</p> <p>Usage Notes:</p> <pre><code>1 - After completion of the send function, the internal\n    variable SENDSTR will contain the value of string. A\n    difference from ATI is that SENDSTR will NOT contain\n    characters that were ignored.\n\n2 - The send function transmits data to the active\n    session starting at the current cursor position. The\n    programmer can access the internal variables CURROW\n    and CURCOL to check the current cursor location. A\n    difference from ATI is that the position at which\n    data is transmitted can be specified by (row,col).\n\n3 - &lt;TODO need more on mneumonics&gt;\n\nSpecial Keys\n\n    [backtab]\n    [curdown]\n    [curleft]\n    [curright]\n    [curup]\n    [delete]\n    [eraseeof]\n    [home]\n    [insert]\n    [newline]\n    [tab]\n\nThe RESET key ([reset])\n\n    The RESET key has three different meanings--depending on\n    its location in the input string:\n\n    Terminate INSERT mode\n        Occurs when the key appears in the middle of the\n        input string; i.e., there is data before and\n        after the RESET key.\n\n    Ignore Keyboard Lock Condition\n        Occurs when the key is the first data item in the\n        string being sent. Normally if the keyboard is\n        locked, ATI waits up to 1 minute for the keyboard\n        to unlock before sending data. (Note that this\n        value can be changed using the KEYUNLOCK internal\n        variable. However, there are rare cases when it\n        is necessary to transmit data while the keyboard\n        is locked. For example, the user may want to send\n        '####' to PVM (Pass-Through Virtual Machine) to\n        drop a link, ignoring the condition of the\n        screen. For example:\n\n            send(reset+'####'+enter)\n\n        Note: If the keyboard were not to unlock in the\n        time allowed, the session would be dropped.\n\n    Suppress Warning Messages\n        Is not a very common use of the RESET key. By\n        appending a RESET key just before the control\n        key, warnings are not logged by the compiler if\n        the send function was unsuccessful. For example,\n        it is usually desirable not to see warning\n        messages when a LOGOFF or DISCONNECT is sent to a\n        session. For example:\n\n            send('LOGOFF'+reset)\n\nControl keys\n\n    [clear]\n    [enter]\n    [pa1]-[pa3]\n    [pf1]-[pf24] (also [pf01]-[pf24])\n\n    Note that there is no equivalent to the ATI HOLDSEND.\n    None is needed since ENTER is not implied.\n</code></pre> <p>Return Codes (return value and internal variable RC):</p> <pre><code>     0  The string was successfully sent to the host screen.\n\n     4  Data placed in protected field ignored.\n\n    12  Session lost or undefined.\n\n    14  Session dropped due to excessive keyboard lock;\n        null string returned.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.set","title":"set","text":"<pre><code>set(name, value, xtern=True, trace=None, verifycert=None)\n</code></pre> <p>Set an ATI-like variable.</p>"},{"location":"ati/#tnz.ati.Ati.share","title":"share","text":"<pre><code>share(*args)\n</code></pre> <p>Perform the ATI GLOBAL statement function</p>"},{"location":"ati/#tnz.ati.Ati.value","title":"value","text":"<pre><code>value(name, trace=None)\n</code></pre> <p>returns the contents of the ATI variable for the input name</p>"},{"location":"ati/#tnz.ati.Ati.wait","title":"wait","text":"<pre><code>wait(*args)\n</code></pre> <p>Wait for either a specific time limit or for a specified wait condition to be satisfied.</p> <p>Usage/Syntax:</p> <pre><code>wait([{ss | '[[hh:]mm:]ss'}])\nwait([{ss | '[[hh:]mm:]ss'},] {bool | callable})\n</code></pre> <p>hh     Represents the number of hours to wait.</p> <p>mm     Represents the number of minutes to wait.</p> <p>ss     Represents the number of seconds to wait.</p> <p>:     A delimiter that separates the hour, minute, and second.</p> <p>bool     An expression that evaluates to True or False.</p> <p>callable     An expression in the form of a callable (e.g. lambda)     that returns a bool.</p> <p>Usage Notes:</p> <pre><code>- The wait function will return upon a True expression\n  (or when the wait time is exceeded).\n\n- The wait function will continuously request updates of\n  the current host session screen. A wait time of 0 will\n  cause a host screen update to occur and ATI processing\n  to continue immediately.\n\n- If no time is specified, the wait time will be the\n  value of the program variable MAXWAIT.\n\n- The condition is checked once every second unless the\n  value of the internal variable, WAITSLEEP, is changed.\n</code></pre> <p>Return Codes (return value and internal variable RC):</p> <pre><code> 0  The wait time expired before the expression was\n    satisfied.\n\n 1  The expression was satisfied before the wait time\n    expired.\n\n12  Sesesion lost or undefined.\n</code></pre>"},{"location":"ati/#tnz.ati.Ati.when","title":"when","text":"<pre><code>when(*args)\n</code></pre> <p>ATI WHEN statement function.</p> <p>Usage/Syntax:</p> <pre><code>@when({bool | callable | lambda: expression})\ndef whenlabel():\n    statement(s)\n\nwhen(whenlabel, [priority, ] ON)\nwhen(whenlabel, OFF)\n</code></pre> <p>whenlabel     The assigned name of the WHEN block.</p> <p>priority     A priority level that a WHEN block is given at runtime.     This determines the order of execution relative to other     active WHEN blocks. The priority level is an integer     between 1 and 5. The default priority is 1 (highest) at     the start of program execution. The priority will remain     the last value assigned to it on a WHEN ON statement.</p> <p>ON     Used to begin the monitoring of whenlabel. All WHEN     blocks are initialized to OFF. For any monitoring of WHEN     blocks to occur, each WHEN must be explicitly turned ON.</p> <p>OFF     Used to suspend the monitoring of whenlabel. It is highly     recommended to turn off any unnecessary WHEN conditions.     Excessive WHEN condition monitoring slows processing.</p> <p>     An indicator that a WHEN, when active, will execute in     all included or called programs as well as the program in     which it is declared. <p>expression     A WHEN condition in the form of an expression.</p> <p>statement(s)     A list of statements to be executed whenever expression     is true.</p> <p>Usage Notes</p> <pre><code>-  The expression used in a WHEN block may involve a host\n   screen check and/or an ATI variable check. The WHEN\n   conditions may be classified to determine the\n   frequency of monitoring.\n\n-  While a WHEN block is currently being executed, no\n   other WHEN expressions are checked.\n\n-  A WHEN condition can be suspended or executed inside\n   of a WHEN execution block.\n</code></pre>"},{"location":"colors/","title":"Colors","text":"<p>By default, tnz will emulate a 3270 terminal that has 8 colors and <code>zti</code> will assume a host terminal capable of true color is being used and use a tnz-defined color palette to display those 8 terminal colors.</p> <p>If you do not want (or cannot use, in the case of <code>Terminal.app</code>) this default color behavior, you can use the <code>TNZ_COLORS</code> environment variable. Use <code>export TNZ_COLORS=256</code> to direct <code>zti</code> to use the 256-color palette instead of true color. Set to an integer less than 16 and <code>zti</code> will assume only the standard ansi colors can be used (for example <code>export TNZ_COLORS=8</code>). This can be helpful if your terminal doesn't support true color or if you want to change the colors to your liking - terminal emulators typically allow you to set the ansi colors. Set to an integer less than 8 and tnz will emulate a 3270 terminal that has no color capability and <code>zti</code> will not use any color capability.</p> <p>The following table describes, for each color mode, the host terminal colors used for the 8 different 3270 colors. If different colors are desired, check the zti-hosting terminal for the capability to change the color palette. You may need to use TNZ_COLORS=8 to get zti to use the customized color palette.</p> <p>The actual terminal 8-bit color palette may not match the table above. It is common for terminal emulators to customize the palette.</p>"},{"location":"screen-sizing/","title":"Screen Sizing","text":"<p>Typical desktop applications can be resized. And resizing does not typically change the scale of the content (i.e. the font size) - it changes the amount of viewable content. In the world of terminals, this means a change in the number of character rows and columns. Even though it is common for modern applications to handle window resizing, it is not common for legacy 3270 applications to handle terminal resizing. The tnz library helps with this dilemma by keeping the 3270 terminal size constant for a connected session even when the host acii terminal size may be changing. But this does not help when reconnecting sessions.</p> <p>One thing that may help keep the 3270 terminal size constant in reconnect scenarios is allowing tnz to select the terminal size for you. It will select from a relatively small set of standard terminal sizes the largest size that fits on the host terminal. So, for small changes to the terminal size, the largest standard size will tend to not change.</p>"},{"location":"screen-sizing/#session_ps_size","title":"SESSION_PS_SIZE","text":"<p>To help with reconnect scenarios, or to just request a specific size, set the <code>SESSION_PS_SIZE</code> environment variable to the desired size (for example <code>export SESSION_PS_SIZE=43x80</code> for 43 rows by 80 columns). When using <code>ati.py</code> or in <code>zti</code> you can also use the <code>SESSION_PS_SIZE</code> ATI-like variable in the same way (for example <code>set SESSION_PS_SIZE 62x160</code>).</p> <p>In addition to taking the default largest standard terminal size that fits and specifying a specific size, there are some special values that you can set the <code>SESSION_PS_SIZE</code> environment variable to that <code>zti</code> will use to determine the 3270 terminal size:</p> <ul> <li><code>MAX</code> fill host terminal but leave space for header/footer and session selector (column max of 160)</li> <li><code>MAX255</code> fill host terminal but leave space for header/footer and session selector (column max of 255)</li> <li><code>FULL</code> fill host terminal (column max of 160)</li> <li><code>FULL255</code> fill host terminal (column max of 255)</li> </ul>"},{"location":"screen-sizing/#autosize","title":"Autosize","text":"<p>IBM Personal Communications has a feature that will scale the font so that the 3270 terminal area takes up all of the window area. This behavior can also be simulated using tnz in PuTTY:</p> <ol> <li>Set your font size and window size the way you like it for your shell.</li> <li>In zti, you can use the <code>size</code> command to get the current number of rows and columns of your terminal.</li> <li>Use PuTTY Change Settings. Choose the Window category. Set the size of the window to your current rows and columns and for \"When window is resize\", choose \"Change the size of the font\". Apply those changes.</li> <li>Enter <code>autosize</code> in <code>zti</code> to turn on the tnz feature.</li> </ol> <p>When using <code>goto</code>, <code>zti</code> will use the shell terminal size as your preferred scale. It will then use the terminal capability to set the size of the terminal. In this case, not only will the rows and columns change, but the font will change in order to keep all terminal characters in your window - as opposed to the normal setting that would cause a change to the size of the window instead of the size of the font. But, unlike PCOMM, it may not fill the whole window in order to respect your preferred scale.</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#ssl-verification","title":"SSL Verification","text":"<p>Use environment variable <code>SESSION_SSL_VERIFY=cert</code> to require that the server provide a trusted certificate.</p> <p>Use environment variable <code>SESSION_SSL_VERIFY=hostname</code> to require that the certificate hostname match the requested hostname. Note that this also requires that the server provide a trusted certificate.</p>"},{"location":"security/#cipher-issues","title":"Cipher Issues","text":"<p>Python 3.10 is aggressive in causing failures for algorithms/options that are not secure enough. If you receive an SSL-related message, there is a good chance of a security weakness in the host/server.</p> <p>The best course of action is to request that the server be updated to support security best practices in terms of supported encryption algorithms and key sizes.</p> <p>The other option is to try to use the \"less secure\" way that the server is \"forcing\". If this is a problem with the changes in Python 3.10, doing <code>export ZTI_SECLEVEL=1</code> (or <code>SET ZTI_SECLEVEL=1</code> in Windows) before starting zti should accept the \"less secure\" option by downgrading the level from 2 to 1.</p>"},{"location":"security/#port-defaults","title":"Port Defaults","text":"<p>If <code>SESSION_SSL=0</code> is used, the default port is 23. If <code>SESSION_SSL=1</code> is used, the default port is 992.</p>"},{"location":"tnz/","title":"tnz","text":"<p>TN3270 terminal class.</p> <p>Low level APIs for telnet-3270 for Z tool and library.</p> Usage <p>from tnz import tnz</p> Environment variables used <p>SESSION_PS_SIZE SESSION_SECLEVEL SESSION_SSL_VERIFY TNZ_COLORS TNZ_LOGGING ZTI_SECLEVEL</p> <p>Copyright 2021, 2024 IBM Inc. All Rights Reserved.</p> <p>SPDX-License-Identifier: Apache-2.0</p>"},{"location":"tnz/#tnz.tnz-classes","title":"Classes","text":""},{"location":"tnz/#tnz.tnz.Tnz","title":"Tnz","text":"<p>One instance for each terminal and the connection.</p> Methods for actions taken at the terminal <p>attn                         ATTN enter                        ENTER clear                        CLEAR key_backspace                Backspace key_backtab                  Backtab key_curdown                  Down key_curleft                  Left key_curright                 Right key_curup                    Up key_data                     characters/string key_delete                   Delete key_end                      (End) key_eraseeof                 Erase EOF key_eraseinput               ERASE INPUT key_home                     Home key_insdata                  insert characters/string key_newline                  NL key_tab                      Tab key_wordl                    (Word Left) key_wordr                    (Word Right) pa2, pa2, pa3                PAx pfX (pf1, pf2, \u2026 pf24)     PFxx</p> Additional methods to enhance the terminal experience <p>paste_data                   multiline characters/string</p> Characters in the terminal <p>scrstr                       Method to get characters/string</p> Attributes in the terminal <p>plane_fa                     Field attributes plane_eh                     Extended highlighting plane_fg                     Forground color plane_bg                     Background color</p> <p>Various methods perform actions taken by the remote application. Use the wait method to wait for the remote application to request actions and for the instance to process them.</p> <p>The data in the 3270 terminal is located by an address. This may be different from other applications that use a row and column or an x position and a y position. In addition, vectors described using addresses typically wrap - for instance from address 2 to address 1 produces a vector start at address 2, continues to the end of the terminal, continues at the beginning of the terminal, and terminates at address 1.</p> <p>The send method and the send_* methods send data to the remote host.</p>"},{"location":"tnz/#tnz.tnz.Tnz-attributes","title":"Attributes","text":""},{"location":"tnz/#tnz.tnz.Tnz.addr16bit","title":"addr16bit  <code>instance-attribute</code>","text":"<pre><code>addr16bit = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.aid","title":"aid  <code>instance-attribute</code>","text":"<pre><code>aid = 96\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.alt","title":"alt  <code>instance-attribute</code>","text":"<pre><code>alt = 0\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.amaxcol","title":"amaxcol  <code>instance-attribute</code>","text":"<pre><code>amaxcol = 80\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.amaxrow","title":"amaxrow  <code>instance-attribute</code>","text":"<pre><code>amaxrow = 24\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.bufadd","title":"bufadd  <code>instance-attribute</code>","text":"<pre><code>bufadd = 0\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.buffer_size","title":"buffer_size  <code>instance-attribute</code>","text":"<pre><code>buffer_size = maxrow * maxcol\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.bytes_received","title":"bytes_received  <code>instance-attribute</code>","text":"<pre><code>bytes_received = 0\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.bytes_sent","title":"bytes_sent  <code>instance-attribute</code>","text":"<pre><code>bytes_sent = 0\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.capable_color","title":"capable_color  <code>instance-attribute</code>","text":"<pre><code>capable_color = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.cert_verified","title":"cert_verified  <code>property</code>","text":"<pre><code>cert_verified\n</code></pre> <p>Bool indicating if secure and cert was verified as trusted.</p>"},{"location":"tnz/#tnz.tnz.Tnz.codec_info","title":"codec_info  <code>instance-attribute</code>","text":"<pre><code>codec_info = {}\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.colors","title":"colors  <code>instance-attribute</code>","text":"<pre><code>colors = int(getenv('TNZ_COLORS', '768'))\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.curadd","title":"curadd  <code>instance-attribute</code>","text":"<pre><code>curadd = 0\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.ddmdata","title":"ddmdata  <code>instance-attribute</code>","text":"<pre><code>ddmdata = None\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.ddmdict","title":"ddmdict  <code>instance-attribute</code>","text":"<pre><code>ddmdict = {}\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.ddmrecv","title":"ddmrecv  <code>instance-attribute</code>","text":"<pre><code>ddmrecv = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.ddmsend","title":"ddmsend  <code>instance-attribute</code>","text":"<pre><code>ddmsend = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.dmaxcol","title":"dmaxcol  <code>instance-attribute</code>","text":"<pre><code>dmaxcol = 80\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.dmaxrow","title":"dmaxrow  <code>instance-attribute</code>","text":"<pre><code>dmaxrow = 24\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.encoding","title":"encoding  <code>property</code> <code>writable</code>","text":"<pre><code>encoding\n</code></pre> <p>Name of encoding.</p>"},{"location":"tnz/#tnz.tnz.Tnz.file_appends","title":"file_appends  <code>instance-attribute</code>","text":"<pre><code>file_appends = None\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.host_verified","title":"host_verified  <code>property</code>","text":"<pre><code>host_verified\n</code></pre> <p>Bool indicating if secure and host was verified.</p>"},{"location":"tnz/#tnz.tnz.Tnz.inop","title":"inop  <code>instance-attribute</code>","text":"<pre><code>inop = 6\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.inpid","title":"inpid  <code>instance-attribute</code>","text":"<pre><code>inpid = 0\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.lastcmd","title":"lastcmd  <code>instance-attribute</code>","text":"<pre><code>lastcmd = None\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.local_do","title":"local_do  <code>instance-attribute</code>","text":"<pre><code>local_do = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.local_dont","title":"local_dont  <code>instance-attribute</code>","text":"<pre><code>local_dont = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.local_will","title":"local_will  <code>instance-attribute</code>","text":"<pre><code>local_will = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.local_wont","title":"local_wont  <code>instance-attribute</code>","text":"<pre><code>local_wont = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.lu_name","title":"lu_name  <code>instance-attribute</code>","text":"<pre><code>lu_name = None\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.maxcol","title":"maxcol  <code>instance-attribute</code>","text":"<pre><code>maxcol = dmaxcol\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.maxrow","title":"maxrow  <code>instance-attribute</code>","text":"<pre><code>maxrow = dmaxrow\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.plane_bg","title":"plane_bg  <code>instance-attribute</code>","text":"<pre><code>plane_bg = bytearray(buffer_size)\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.plane_cs","title":"plane_cs  <code>instance-attribute</code>","text":"<pre><code>plane_cs = bytearray(buffer_size)\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.plane_dc","title":"plane_dc  <code>instance-attribute</code>","text":"<pre><code>plane_dc = bytearray(buffer_size)\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.plane_eh","title":"plane_eh  <code>instance-attribute</code>","text":"<pre><code>plane_eh = bytearray(buffer_size)\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.plane_fa","title":"plane_fa  <code>instance-attribute</code>","text":"<pre><code>plane_fa = bytearray(buffer_size)\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.plane_fg","title":"plane_fg  <code>instance-attribute</code>","text":"<pre><code>plane_fg = bytearray(buffer_size)\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.pwait","title":"pwait  <code>instance-attribute</code>","text":"<pre><code>pwait = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.read_state","title":"read_state  <code>instance-attribute</code>","text":"<pre><code>read_state = NORMAL\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.readlines","title":"readlines  <code>instance-attribute</code>","text":"<pre><code>readlines = None\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.readlines_pa2","title":"readlines_pa2  <code>instance-attribute</code>","text":"<pre><code>readlines_pa2 = True\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.remote_do","title":"remote_do  <code>instance-attribute</code>","text":"<pre><code>remote_do = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.remote_dont","title":"remote_dont  <code>instance-attribute</code>","text":"<pre><code>remote_dont = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.remote_will","title":"remote_will  <code>instance-attribute</code>","text":"<pre><code>remote_will = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.remote_wont","title":"remote_wont  <code>instance-attribute</code>","text":"<pre><code>remote_wont = []\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.secure","title":"secure  <code>property</code>","text":"<pre><code>secure\n</code></pre> <p>Bool indicating if connection is secure.</p>"},{"location":"tnz/#tnz.tnz.Tnz.seslost","title":"seslost  <code>instance-attribute</code>","text":"<pre><code>seslost = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.start_tls_completed","title":"start_tls_completed  <code>property</code>","text":"<pre><code>start_tls_completed\n</code></pre> <p>Bool indicating if start_tls completed.</p>"},{"location":"tnz/#tnz.tnz.Tnz.system_lock_wait","title":"system_lock_wait  <code>instance-attribute</code>","text":"<pre><code>system_lock_wait = True\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.terminal_type","title":"terminal_type  <code>instance-attribute</code>","text":"<pre><code>terminal_type = 'IBM-DYNAMIC'\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.tn3270","title":"tn3270  <code>property</code>","text":"<pre><code>tn3270\n</code></pre> <p>Bool indicating if NOT NVT mode.</p>"},{"location":"tnz/#tnz.tnz.Tnz.tn3270e","title":"tn3270e  <code>property</code>","text":"<pre><code>tn3270e\n</code></pre> <p>Bool indicating if using TN3270E.</p>"},{"location":"tnz/#tnz.tnz.Tnz.updated","title":"updated  <code>instance-attribute</code>","text":"<pre><code>updated = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz.use_tn3270e","title":"use_tn3270e  <code>instance-attribute</code>","text":"<pre><code>use_tn3270e = False\n</code></pre>"},{"location":"tnz/#tnz.tnz.Tnz-functions","title":"Functions","text":""},{"location":"tnz/#tnz.tnz.Tnz.address","title":"address","text":"<pre><code>address(address_bytes)\n</code></pre> <p>Return an integer buffer address for the input encoded byte string address.</p>"},{"location":"tnz/#tnz.tnz.Tnz.address_bytes","title":"address_bytes","text":"<pre><code>address_bytes(address)\n</code></pre> <p>Return an encoded byte string for the input integer buffer address.</p>"},{"location":"tnz/#tnz.tnz.Tnz.attn","title":"attn","text":"<pre><code>attn()\n</code></pre> <p>Send 3270 ATTN</p>"},{"location":"tnz/#tnz.tnz.Tnz.char_addrs","title":"char_addrs","text":"<pre><code>char_addrs(saddr=None, eaddr=None)\n</code></pre> <p>A generator of character data address ranges.</p>"},{"location":"tnz/#tnz.tnz.Tnz.clear","title":"clear","text":"<pre><code>clear(zti=None)\n</code></pre> <p>Send CLEAR</p>"},{"location":"tnz/#tnz.tnz.Tnz.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection.</p>"},{"location":"tnz/#tnz.tnz.Tnz.connect","title":"connect","text":"<pre><code>connect(\n    host=None,\n    port=None,\n    secure=False,\n    verifycert=True,\n    *,\n    event=None\n)\n</code></pre> <p>Connect to the host.</p>"},{"location":"tnz/#tnz.tnz.Tnz.ddm_in_progress","title":"ddm_in_progress","text":"<pre><code>ddm_in_progress()\n</code></pre> <p>Return bool indicating if ddm is in progress.</p>"},{"location":"tnz/#tnz.tnz.Tnz.download","title":"download","text":"<pre><code>download()\n</code></pre> <p>Return current Download (or None).</p>"},{"location":"tnz/#tnz.tnz.Tnz.enter","title":"enter","text":"<pre><code>enter(text=None, zti=None)\n</code></pre> <p>Send ENTER</p>"},{"location":"tnz/#tnz.tnz.Tnz.extended_color_mode","title":"extended_color_mode","text":"<pre><code>extended_color_mode()\n</code></pre> <p>Return bool indicating if screen using extended colors.</p>"},{"location":"tnz/#tnz.tnz.Tnz.fav_repr","title":"fav_repr  <code>staticmethod</code>","text":"<pre><code>fav_repr(fav)\n</code></pre> <p>Return string representation of field attribute value.</p>"},{"location":"tnz/#tnz.tnz.Tnz.field","title":"field","text":"<pre><code>field(address)\n</code></pre> <p>Return field address and attribute value as tuple.</p> <p>Get the field address and attribute value associated with the input address.</p>"},{"location":"tnz/#tnz.tnz.Tnz.fields","title":"fields","text":"<pre><code>fields(saddr=None, eaddr=None)\n</code></pre> <p>A generator of all fields as (address, attribute).</p>"},{"location":"tnz/#tnz.tnz.Tnz.get_file","title":"get_file","text":"<pre><code>get_file(parms, filename, assist=True)\n</code></pre> <p>Get host file into local file.</p> <p>Would be nice, when the local system is Z, to transfer in binary. However, when transfer is done in binary, no information about the record format comes across. So, there is no knowledge if the host records were fixed-80 or variable length - so there is no indication as to where the line breaks should be.</p> <p>Transfering using the ASCII CRLF options seems to cause the host to convert between cp037 and iso8859-1. If something other than cp037 is expected/needed, support must be added to translate back from iso8859-1 to cp037. Then using the desired code page (e.g. cp1047) to translate to Unicode.</p>"},{"location":"tnz/#tnz.tnz.Tnz.getpeername","title":"getpeername","text":"<pre><code>getpeername()\n</code></pre> <p>Return remote address to which socket is connected.</p>"},{"location":"tnz/#tnz.tnz.Tnz.getsockettype","title":"getsockettype","text":"<pre><code>getsockettype()\n</code></pre> <p>Return type of socket.</p>"},{"location":"tnz/#tnz.tnz.Tnz.group_addrs","title":"group_addrs","text":"<pre><code>group_addrs(saddr, eaddr)\n</code></pre> <p>A generator of character data address range groups.</p> <p>A generator function that iterates through groups of characters. The characters in each group have all the same attributes. Each iteration returns a tuple with the start and end addresses.</p> <p>It is assumed that the input address(es) are valid for the current buffer size. They are in the range from 0 to buffer_size-1, inclusive.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_detectable_attr","title":"is_detectable_attr  <code>staticmethod</code>","text":"<pre><code>is_detectable_attr(attr)\n</code></pre> <p>Return whether or not the input field attribute is for a selector-pen-detectable field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_displayable_attr","title":"is_displayable_attr  <code>staticmethod</code>","text":"<pre><code>is_displayable_attr(attr)\n</code></pre> <p>Return whether or not the input field attribute is for a displayable field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_intensified_attr","title":"is_intensified_attr  <code>staticmethod</code>","text":"<pre><code>is_intensified_attr(attr)\n</code></pre> <p>Return whether or not the input field attribute is for an intensified field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_modified_attr","title":"is_modified_attr  <code>staticmethod</code>","text":"<pre><code>is_modified_attr(attr)\n</code></pre> <p>Return whether or not the input field attribute is for a modified field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_normal_attr","title":"is_normal_attr  <code>staticmethod</code>","text":"<pre><code>is_normal_attr(attr)\n</code></pre> <p>Return whether or not the input field attribute is for a normal field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_numeric_attr","title":"is_numeric_attr  <code>staticmethod</code>","text":"<pre><code>is_numeric_attr(attr)\n</code></pre> <p>Return whether or not the input field attribute is for a numeric field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_pen_detectable","title":"is_pen_detectable","text":"<pre><code>is_pen_detectable(address)\n</code></pre> <p>Return True or False to indicate if the address is selector-pen detectable</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_protected","title":"is_protected","text":"<pre><code>is_protected(address)\n</code></pre> <p>Return True or False to indicate if the address is protected</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_protected_attr","title":"is_protected_attr  <code>staticmethod</code>","text":"<pre><code>is_protected_attr(attr)\n</code></pre> <p>Return whether or not the input field attribute is for a protected field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.is_unprotected","title":"is_unprotected","text":"<pre><code>is_unprotected()\n</code></pre> <p>Return True or False to indicate if all fields are unprotected</p>"},{"location":"tnz/#tnz.tnz.Tnz.iterow","title":"iterow","text":"<pre><code>iterow(saddr, eaddr)\n</code></pre> <p>Iterate through rows of bytes in the input bytearray.</p> <p>Note that the inputs are addresses and the outputs are positions. In other words, the outputs for each iteration will always have the start less than the end and buffer_size is used when the vector goes to the end of the bytearray.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_aid","title":"key_aid","text":"<pre><code>key_aid(aid)\n</code></pre> <p>Process an aid key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_backspace","title":"key_backspace","text":"<pre><code>key_backspace(zti=None)\n</code></pre> <p>Process backspace key, which behaves like a cursor left followed by a delete as long as cursor is not on a field attribute nor is there a field attribute to the left.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_backtab","title":"key_backtab","text":"<pre><code>key_backtab(zti=None)\n</code></pre> <p>Process backtab key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_curdown","title":"key_curdown","text":"<pre><code>key_curdown(zti=None)\n</code></pre> <p>Process cursor down key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_curleft","title":"key_curleft","text":"<pre><code>key_curleft(zti=None)\n</code></pre> <p>Process cursor left key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_curright","title":"key_curright","text":"<pre><code>key_curright(zti=None)\n</code></pre> <p>Process cursor right key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_curup","title":"key_curup","text":"<pre><code>key_curup(zti=None)\n</code></pre> <p>Process cursor up key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_data","title":"key_data","text":"<pre><code>key_data(text, onerow=False, zti=None)\n</code></pre> <p>Process keyboard character data.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_delete","title":"key_delete","text":"<pre><code>key_delete(zti=None)\n</code></pre> <p>Process delete key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_end","title":"key_end","text":"<pre><code>key_end()\n</code></pre> <p>Process End key - go to end of text in field.</p> <p>End is not a 3270 key, but common on modern keyboard.</p> <p>Cursor will move onto a null character in the current field where the character to the left is not a null character and all characters to the right are null characters.</p> <p>If cursor is in an unprotected field and the field does not end in a null character, the cursor will be put on the last character in the field.</p> <p>If cursor is in a protected field and the field does not end in a null character, the cursor will be put on the field attribute of the next field.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_eraseeof","title":"key_eraseeof","text":"<pre><code>key_eraseeof(zti=None)\n</code></pre> <p>Process eraseeof key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_eraseinput","title":"key_eraseinput","text":"<pre><code>key_eraseinput(zti=None)\n</code></pre> <p>Process ERASE INPUT key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_home","title":"key_home","text":"<pre><code>key_home(zti=None)\n</code></pre> <p>Process home key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_ins_data","title":"key_ins_data","text":"<pre><code>key_ins_data(text, zti=None)\n</code></pre> <p>Process keyboard character data in insert mode.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_newline","title":"key_newline","text":"<pre><code>key_newline(zti=None)\n</code></pre> <p>Process newline key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_tab","title":"key_tab","text":"<pre><code>key_tab(zti=None)\n</code></pre> <p>Process tab key.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_word_left","title":"key_word_left","text":"<pre><code>key_word_left()\n</code></pre> <p>Move cursor left to the previous word.</p>"},{"location":"tnz/#tnz.tnz.Tnz.key_word_right","title":"key_word_right","text":"<pre><code>key_word_right()\n</code></pre> <p>Move cursor right to the next word.</p>"},{"location":"tnz/#tnz.tnz.Tnz.logging","title":"logging  <code>classmethod</code>","text":"<pre><code>logging()\n</code></pre> <p>Initialize logging</p>"},{"location":"tnz/#tnz.tnz.Tnz.next_data","title":"next_data","text":"<pre><code>next_data(saddr, eaddr=None)\n</code></pre> <p>Get the address range of the next field data.</p>"},{"location":"tnz/#tnz.tnz.Tnz.next_field","title":"next_field","text":"<pre><code>next_field(saddr, eaddr=None, offset=1)\n</code></pre> <p>Get the address and attribute value of the next field.</p> <p>Get the address and attribute value associated with the next field relative to the input field address. The first location for searching is the address AFTER the input saddr. If eaddr is specified.</p>"},{"location":"tnz/#tnz.tnz.Tnz.pa1","title":"pa1","text":"<pre><code>pa1()\n</code></pre> <p>Send PA1</p>"},{"location":"tnz/#tnz.tnz.Tnz.pa2","title":"pa2","text":"<pre><code>pa2()\n</code></pre> <p>Send PA2</p>"},{"location":"tnz/#tnz.tnz.Tnz.pa3","title":"pa3","text":"<pre><code>pa3()\n</code></pre> <p>Send PA3</p>"},{"location":"tnz/#tnz.tnz.Tnz.paste_data","title":"paste_data","text":"<pre><code>paste_data(data, zti=None)\n</code></pre> <p>Process pasted character data.</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf1","title":"pf1","text":"<pre><code>pf1()\n</code></pre> <p>Send PF1</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf10","title":"pf10","text":"<pre><code>pf10()\n</code></pre> <p>Send PF10</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf11","title":"pf11","text":"<pre><code>pf11()\n</code></pre> <p>Send PF11</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf12","title":"pf12","text":"<pre><code>pf12()\n</code></pre> <p>Send PF12</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf13","title":"pf13","text":"<pre><code>pf13()\n</code></pre> <p>Send PF13</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf14","title":"pf14","text":"<pre><code>pf14()\n</code></pre> <p>Send PF14</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf15","title":"pf15","text":"<pre><code>pf15()\n</code></pre> <p>Send PF15</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf16","title":"pf16","text":"<pre><code>pf16()\n</code></pre> <p>Send PF16</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf17","title":"pf17","text":"<pre><code>pf17()\n</code></pre> <p>Send PF17</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf18","title":"pf18","text":"<pre><code>pf18()\n</code></pre> <p>Send PF18</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf19","title":"pf19","text":"<pre><code>pf19()\n</code></pre> <p>Send PF19</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf2","title":"pf2","text":"<pre><code>pf2()\n</code></pre> <p>Send PF2</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf20","title":"pf20","text":"<pre><code>pf20()\n</code></pre> <p>Send PF20</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf21","title":"pf21","text":"<pre><code>pf21()\n</code></pre> <p>Send PF21</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf22","title":"pf22","text":"<pre><code>pf22()\n</code></pre> <p>Send PF22</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf23","title":"pf23","text":"<pre><code>pf23()\n</code></pre> <p>Send PF23</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf24","title":"pf24","text":"<pre><code>pf24()\n</code></pre> <p>Send PF24</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf3","title":"pf3","text":"<pre><code>pf3()\n</code></pre> <p>Send PF3</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf4","title":"pf4","text":"<pre><code>pf4()\n</code></pre> <p>Send PF4</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf5","title":"pf5","text":"<pre><code>pf5()\n</code></pre> <p>Send PF5</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf6","title":"pf6","text":"<pre><code>pf6()\n</code></pre> <p>Send PF6</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf7","title":"pf7","text":"<pre><code>pf7()\n</code></pre> <p>Send PF7</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf8","title":"pf8","text":"<pre><code>pf8()\n</code></pre> <p>Send PF8</p>"},{"location":"tnz/#tnz.tnz.Tnz.pf9","title":"pf9","text":"<pre><code>pf9()\n</code></pre> <p>Send PF9</p>"},{"location":"tnz/#tnz.tnz.Tnz.put_file","title":"put_file","text":"<pre><code>put_file(filename, parms, assist=True)\n</code></pre> <p>Put host file from local file.</p>"},{"location":"tnz/#tnz.tnz.Tnz.rcba","title":"rcba  <code>staticmethod</code>","text":"<pre><code>rcba(value, start, stop)\n</code></pre> <p>read circular byte array</p> <p>value: byte array start: first index into byte array stop: last index into byte array returns copy of data from array</p>"},{"location":"tnz/#tnz.tnz.Tnz.scrstr","title":"scrstr","text":"<pre><code>scrstr(saddr=0, eaddr=0, rstrip=None)\n</code></pre> <p>Return a string representation of the character buffer.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send","title":"send","text":"<pre><code>send(data=None)\n</code></pre> <p>Send input byte array as data to the host. This method will escape IAC bytes.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_3270_data","title":"send_3270_data","text":"<pre><code>send_3270_data(value)\n</code></pre> <p>Send input byte array as a 3270-DATA record to the host. This method will escape IAC bytes and send EOR after the data.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_aid","title":"send_aid","text":"<pre><code>send_aid(aid, short=None)\n</code></pre> <p>Process the sending of an AID (enter command). Used by methods with the name of the AID (e.g. enter).</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_command","title":"send_command","text":"<pre><code>send_command(code)\n</code></pre> <p>Send telnet command to the host.</p> <p>Send a single-byte telnet command to the remote.</p> Supported commands <p>NAME               CODE  MEANING NOP                241   No operation. Data Mark          242   The data stream portion of a Synch. Break              243   NVT character BRK. Interrupt Process  244   The function IP. Abort output       245   The function AO. Are You There      246   The function AYT. Erase character    247   The function EC. Erase Line         248   The function EL. Go ahead           249   The GA signal.</p> See other methods for other commands <p>NAME               METHOD EOR                send_rec() SE                 send_sub() SB                 send_sub() WILL               send_will() WON'T              send_wont() DO                 send_do() DON'T              send_dont()</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_do","title":"send_do","text":"<pre><code>send_do(opt, buffer=False)\n</code></pre> <p>Send DO to the host.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_dont","title":"send_dont","text":"<pre><code>send_dont(opt, buffer=False)\n</code></pre> <p>Send DON'T to the host.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_rec","title":"send_rec","text":"<pre><code>send_rec(value)\n</code></pre> <p>Send input byte array as a record to the host. This method will escape IAC bytes and send EOR after the data.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_sub","title":"send_sub","text":"<pre><code>send_sub(value, buffer=False)\n</code></pre> <p>Send input subcommand data to the host. This method will bookend the data with IAC SB adn IAC SE.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_terminal_type","title":"send_terminal_type","text":"<pre><code>send_terminal_type(buffer=False)\n</code></pre> <p>Send the terminal type to the host.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_will","title":"send_will","text":"<pre><code>send_will(opt, buffer=False)\n</code></pre> <p>Send WILL to the host.</p>"},{"location":"tnz/#tnz.tnz.Tnz.send_wont","title":"send_wont","text":"<pre><code>send_wont(opt, buffer=False)\n</code></pre> <p>Send WON'T to the host.</p>"},{"location":"tnz/#tnz.tnz.Tnz.set_cursor_address","title":"set_cursor_address","text":"<pre><code>set_cursor_address(address)\n</code></pre> <p>Set the cursor address to the input address.</p>"},{"location":"tnz/#tnz.tnz.Tnz.set_cursor_position","title":"set_cursor_position","text":"<pre><code>set_cursor_position(row, col)\n</code></pre> <p>Set the cursor address from the input row and column.</p> <p>First (row, col) is (1, 1).</p>"},{"location":"tnz/#tnz.tnz.Tnz.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shut down the connection.</p>"},{"location":"tnz/#tnz.tnz.Tnz.start_readlines","title":"start_readlines","text":"<pre><code>start_readlines()\n</code></pre> <p>Initialize readlines.</p>"},{"location":"tnz/#tnz.tnz.Tnz.ucba","title":"ucba  <code>staticmethod</code>","text":"<pre><code>ucba(dst, start, src, begidx=0, endidx=None)\n</code></pre> <p>update circular byte array</p> <p>dst: target circular byte array start: first index into target byte array src: data to copy to array begidx: start index in data to copy (default is 0) endidx: end index in data to copy (default is len(src))</p>"},{"location":"tnz/#tnz.tnz.Tnz.upload","title":"upload","text":"<pre><code>upload(file)\n</code></pre> <p>Upload data from file-like object to remote server.</p>"},{"location":"tnz/#tnz.tnz.Tnz.uploading","title":"uploading","text":"<pre><code>uploading()\n</code></pre> <p>Return bool indicating if currently uploading.</p>"},{"location":"tnz/#tnz.tnz.Tnz.wait","title":"wait","text":"<pre><code>wait(timeout=None, zti=None, key=None)\n</code></pre> <p>Wait for event.</p> <p>Returns after timeout seconds or when data is received.</p>"},{"location":"tnz/#tnz.tnz.Tnz.word_at","title":"word_at","text":"<pre><code>word_at(address)\n</code></pre> <p>Return the word at the input address.</p>"},{"location":"tnz/#tnz.tnz.TnzError","title":"TnzError","text":"<p>               Bases: <code>Exception</code></p> <p>General Tnz error.</p>"},{"location":"tnz/#tnz.tnz.TnzTerminalError","title":"TnzTerminalError","text":"<p>               Bases: <code>TnzError</code></p> <p>May be related to terminal characteristics.</p>"},{"location":"tnz/#tnz.tnz.TnzTransferError","title":"TnzTransferError","text":"<p>               Bases: <code>TnzError</code></p> <p>Error processing file transfer.</p>"},{"location":"tnz/#tnz.tnz-functions","title":"Functions","text":""},{"location":"tnz/#tnz.tnz.bit6","title":"bit6","text":"<pre><code>bit6(control_int)\n</code></pre> <p>Translate 6-bit control characters to printable characters. This is used for bytes that have bits 0 and 1 reserved in order to make the byte a printable character. See figure D-1 in Data Stream Programmers Reference.</p>"},{"location":"tnz/#tnz.tnz.connect","title":"connect","text":"<pre><code>connect(\n    host=None,\n    port=None,\n    secure=None,\n    verifycert=None,\n    name=None,\n    *,\n    event=None\n)\n</code></pre> <p>Create a new Tnz object and connect to the host.</p> <p>secure = False if do not care about security secure = True for encrypted connection verifycert only has meaning when secure is True</p>"},{"location":"zti/","title":"zti","text":"<p>Z terminal interface</p> <p>Like ATI Session Manager. <pre><code>Command usage:\n    zti [-h] [--nolog] [--noztirc | --rcfile rcfile] [host]\n\n    positional arguments:\n      host             hostname[:port] to connect/go to\n\n    optional arguments:\n      -h, --help       show this help message and exit\n      --nolog          Do not set LOGDEST to zti.log\n      --noztirc        Do not SOURCE .ztirc in home directory\n      --rcfile rcfile  Filename to run using SOURCE\n</code></pre> Create a command plugin by creating a \"zti.commands\" entry point through setup.py that takes a single argument of a command line string.</p> Environment variables used <p>COLORTERM (see _termlib.py) ESCDELAY SESSION_PS_SIZE TERM_PROGRAM (see _termlib.py) TNZ_COLORS (see tnz.py) TNZ_LOGGING (see tnz.py) ZTI_AIDBUFSIZE (9 is default) ZTI_AUTOSIZE ZTI_SECLEVEL (see tnz.py) ZTI_TITLE _BPX_TERMPATH (see _termlib.py)</p> <p>Copyright 2021, 2024 IBM Inc. All Rights Reserved.</p> <p>SPDX-License-Identifier: Apache-2.0</p>"},{"location":"zti/#tnz.zti.create","title":"create","text":"<pre><code>create()\n</code></pre> <p>Create zti instance.</p>"},{"location":"zti/#tnz.zti.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Process zti command.</p>"}]}